#!/bin/bash

if [ -z "${@:1}" ]; then
	command -v lsblk &>/dev/null || { printf "Missing lsblk!" >&2; exit 1; }
	command -v grep  &>/dev/null || { printf "Missing grep!"  >&2; exit 1; }
	command -v find  &>/dev/null || { printf "Missing find!"  >&2; exit 1; }
	used_list="$(lsblk -nr -o PATH,FSTYPE | grep "^[^[:space:]]*[[:space:]][^[:space:]][^[:space:]]*")"
	find /dev/disk/by-id -mindepth 1 | while IFS= read -r line; do
		printf "%s %s\n" "$(realpath "$line")" "$line"
	done | sort -r | { last=""; last_dev=""; while IFS= read -r line; do
		path="${line%[[:space:]]*}"
		[ "${used_list#*"$path"}" != "$used_list" ] && used=1 || used=0
		# don't show base if it has partitions
		[ "${last_dev#"$path"}" = "$last_dev" ] || continue
		[ "$path" != "${last%[[:space:]]*}" ] && {
			[ $used -eq 0 ] && {
				[ -n "$last" ] && printf "\n"
				printf "%s:\n" "$path"
			}
			last_dev="${last%[[:space:]]*}"
		}
		[ $used -eq 0 ] && printf "\t%s\n" "${line#*[[:space:]]}"
		last="$line"
	done; }
	exit 0
fi

command -v zpool &>/dev/null || { printf "Missing zpool!" >&2; exit 1; }
# basically pipefail for below
"${BASH_SOURCE[0]}" > /dev/null || exit 1
[ -n "$("${BASH_SOURCE[0]}" | grep "^[[:space:]]*/dev/disk/by-id/$1$")" ] || {
	mount | grep "/herd/$1" > /dev/null && exit 0
	printf "Disk is not usable!\n" >&2
	exit 1
}
[ $EUID -eq 0 ] || { printf "Not root!\n" >&2; exit 1; }
set -e
mkdir -p /herd
zpool create \
	-o ashift=12 \
	-o feature@async_destroy=disabled \
	-O acltype=posixacl \
	-O atime=off \
	-O compression=lz4 \
	-O dnodesize=auto \
	-O normalization=formD \
	-O relatime=on \
	-O xattr=sa \
	-m "/herd/$1" \
	"herd-$1" "/dev/disk/by-id/$1"
zpool set cachefile=/etc/zfs/zpool.cache "herd-$1"
